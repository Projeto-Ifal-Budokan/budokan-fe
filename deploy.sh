#!/bin/bash

echo "=== DEPLOY STARTED at $(date) ==="

# üîí Verifica se as vari√°veis obrigat√≥rias est√£o definidas
: "${NEXT_PUBLIC_API_URL:?‚ùå ERRO: Vari√°vel NEXT_PUBLIC_API_URL n√£o definida.}"

echo "üîÑ Resetando altera√ß√µes locais..."
git reset --hard

echo "üì• Fazendo git pull da branch main..."
if git pull origin main; then
  echo "‚úÖ C√≥digo atualizado com sucesso!"
else
  echo "‚ùå Falha ao fazer git pull!"
  exit 1
fi

# ‚ö†Ô∏è IMPORTANTE: Exportar a vari√°vel para que o docker-compose possa acess√°-la
export NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL}"

echo "üîç Verificando vari√°vel de ambiente..."
echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"

CONTAINER_NAME="frontend-budokanryu"
if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
  echo "üóëÔ∏è Removendo container antigo: $CONTAINER_NAME"
  docker rm -f $CONTAINER_NAME || {
    echo "‚ö†Ô∏è Falha ao remover container existente!"
  }
fi

# Remover imagens antigas para for√ßar rebuild
echo "üßπ Limpando imagens antigas..."
docker image prune -f
docker builder prune -f

echo "üê≥ Reconstruindo e reiniciando containers..."
if docker compose down --remove-orphans && docker compose up -d --build --force-recreate; then
  echo "‚úÖ Deploy conclu√≠do com sucesso!"
  
  # Verificar se o container est√° rodando
  echo "üîç Verificando status do container..."
  docker ps | grep $CONTAINER_NAME
  
  # Mostrar logs para debug
  echo "üìã √öltimas linhas do log:"
  docker logs $CONTAINER_NAME --tail 20
else
  echo "‚ùå Falha ao reiniciar os containers."
  echo "üìã Logs do container para debug:"
  docker logs $CONTAINER_NAME --tail 50 2>/dev/null || echo "Container n√£o encontrado"
  exit 1
fi

echo "=== DEPLOY FINISHED at $(date) ==="